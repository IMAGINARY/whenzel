{"version":3,"sources":["whenzel.js"],"names":["f","exports","module","define","amd","window","global","self","this","Whenzel","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","validateDatePattern","pattern","context","arguments","undefined","matches","match","concat","Number","testDateRange","patternFrom","patternTo","date","Date","bounds","dateParts","toISOString","substr","split","fromParts","toParts","lowerParts","upperParts","monthRollover","yearRollover","fromDate","toDate","setFullYear","getFullYear","setMonth","getMonth","toDatePars","fromDatePars","join","buildBounds","isoDate","test","rangeParts","re","RegExp","replace","testDate","trim"],"mappings":"CAAA,SAAUA,GAAG,GAAoB,iBAAVC,SAAoC,oBAATC,OAAsBA,OAAOD,QAAQD,SAAS,GAAmB,mBAATG,QAAqBA,OAAOC,IAAKD,OAAO,GAAGH,OAAO,EAA0B,oBAATK,OAAwBA,OAA+B,oBAATC,OAAwBA,OAA6B,oBAAPC,KAAsBA,KAAYC,MAAOC,QAAUT,KAA5T,CAAmU,WAAqC,OAAmB,SAASU,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEf,GAAG,IAAIY,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIC,EAAE,mBAAmBC,SAASA,QAAQ,IAAIjB,GAAGgB,EAAE,OAAOA,EAAED,GAAE,GAAI,GAAGG,EAAE,OAAOA,EAAEH,GAAE,GAAI,IAAII,EAAE,IAAIC,MAAM,uBAAuBL,EAAE,KAAK,MAAMI,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEV,EAAEG,GAAG,CAACd,QAAQ,IAAIU,EAAEI,GAAG,GAAGQ,KAAKD,EAAErB,QAAQ,SAASS,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIY,EAAEA,EAAErB,QAAQS,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGd,QAAQ,IAAI,IAAIiB,EAAE,mBAAmBD,SAASA,QAAQF,EAAE,EAAEA,EAAEF,EAAEW,OAAOT,IAAID,EAAED,EAAEE,IAAI,OAAOD,EAA7b,CAA4c,CAACW,EAAE,CAAC,SAASR,EAAQf,EAAOD,GACv1B,aAEA,SAASyB,EAAoBC,EAA7B,GACE,IAAIC,EAA6B,EAAnBC,UAAUL,aAA+BM,IADzD,EAAA,EACoF,GAC9EC,EAAUJ,EAAQK,MAAM,iDAE5B,GAAgB,OAAZD,EACF,MAAM,IAAIX,MAAM,yBAAyBa,OAAON,EAAS,KAAKM,OAAOL,IAGvE,GAAIM,OAAOH,EAAQ,IAAM,GAA0B,GAArBG,OAAOH,EAAQ,IAC3C,MAAM,IAAIX,MAAM,8BAA8Ba,OAAON,EAAS,KAAKM,OAAOL,IAG5E,GAAIM,OAAOH,EAAQ,IAAM,GAA0B,GAArBG,OAAOH,EAAQ,IAC3C,MAAM,IAAIX,MAAM,4BAA4Ba,OAAON,EAAS,KAAKM,OAAOL,IAsD5E,SAASO,EAAcC,EAAaC,EAApC,GACE,IAAIC,EAA0B,EAAnBT,UAAUL,aAA+BM,IADtD,EAAA,EACiF,IAAIS,KACnFb,EAAoBU,EAAa,+BACjCV,EAAoBW,EAAW,gCAC/B,IAAIG,EAtDN,SAAqBJ,EAAaC,EAAWC,GAC3C,IAIIG,EADUH,EAAKI,cAAcC,OAAO,EAAG,aAAanB,QAChCoB,MAAM,KAC1BC,EAAYT,EAAYQ,MAAM,KAC9BE,EAAUT,EAAUO,MAAM,KAC1BG,EAAa,CAAC,GAAI,GAAI,IACtBC,EAAa,CAAC,GAAI,GAAI,IACtBC,EAAmC,OAAnBJ,EAPV,IAOsD,OAAjBC,EAPrC,IAO8DD,EAP9D,GAO+EC,EAP/E,GAQNI,EAAoC,OAArBL,EATP,IASuD,OAAnBC,EATpC,KASgED,EAThE,GASmFC,EATnF,IASqGD,EATrG,KAS0HC,EAT1H,IAS4IG,GACpJE,EAAW,IAAIZ,KAAKD,GACpBc,EAAS,IAAIb,KAAKD,GAElBY,EACET,EAdM,GAcaI,EAdb,IAciCJ,EAdjC,KAcsDI,EAdtD,IAc6F,OAAnBA,EAb5E,IAauGJ,EAbvG,GAawHI,EAbxH,GAcNM,EAASE,YAAYF,EAASG,cAAgB,GAE9CF,EAAOC,YAAYD,EAAOE,cAAgB,GAEnCL,IACLR,EAnBI,GAmBaI,EAnBb,GAoBNM,EAASI,SAASJ,EAASK,WAAa,GAExCJ,EAAOG,SAASH,EAAOI,WAAa,IAIxC,IACIC,EADYL,EAAOV,cAAcC,OAAO,EAAG,aAAanB,QACjCoB,MAAM,KAE7Bc,EADcP,EAAST,cAAcC,OAAO,EAAG,aAAanB,QACjCoB,MAAM,KAOrC,OANAG,EA9BU,GA8B2B,OAAnBF,EA9BR,GA8BkCa,EA9BlC,GA8BsDb,EA9BtD,GA+BVE,EAhCY,GAgC6B,OAArBF,EAhCR,GAgCoCa,EAhCpC,GAgC0Db,EAhC1D,GAiCZE,EAlCW,GAkC4B,SAApBF,EAlCR,GAkCqCa,EAlCrC,GAkC0Db,EAlC1D,GAmCXG,EAjCU,GAiCyB,OAAjBF,EAjCR,GAiCgCW,EAjChC,GAiCkDX,EAjClD,GAkCVE,EAnCY,GAmC2B,OAAnBF,EAnCR,GAmCkCW,EAnClC,GAmCsDX,EAnCtD,GAoCZE,EArCW,GAqC0B,SAAlBF,EArCR,GAqCmCW,EArCnC,GAqCsDX,EArCtD,GAsCJ,CAACC,EAAWY,KAAK,KAAMX,EAAWW,KAAK,MAejCC,CAAYxB,EAAaC,EAAWC,GAC7CuB,EAAUvB,EAAKI,cAAcC,OAAO,EAAG,aAAanB,QACxD,OAAOqC,GAAWrB,EAAO,IAAMqB,GAAWrB,EAAO,GAcnDtC,EAAOD,QAAU,CACf6D,KAZF,SAAcnC,GACZ,IAAIW,EAA0B,EAAnBT,UAAUL,aAA+BM,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,IAAIU,KAC/EwB,EAAapC,EAAQiB,MAAM,KAE/B,OAA0B,IAAtBmB,EAAWvC,OArBjB,SAAkBG,EAAlB,GACE,IAAIW,EAA0B,EAAnBT,UAAUL,aAA+BM,IADtD,EAAA,EACiF,IAAIS,KACnFb,EAAoBC,GACpB,IAAIqC,EAAK,IAAIC,OAAO,IAAIhC,OAAON,EAAS,KAAKuC,QAAQ,MAAO,QAE5D,OAA6B,OADf5B,EAAKI,cAAcC,OAAO,EAAG,aAAanB,QACzCQ,MAAMgC,GAiBZG,CAASxC,EAAQyC,OAAQ9B,GAEzBH,EAAc4B,EAAW,GAAGK,OAAQL,EAAW,GAAGK,OAAQ9B,MAQnE,KAAK,GAAG,CAAC,GA9FoW,CA8FhW","file":"whenzel.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Whenzel = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nfunction validateDatePattern(pattern) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var matches = pattern.match(/^(\\?\\?\\?\\?|\\d\\d\\d\\d)-(\\?\\?|\\d\\d)-(\\?\\?|\\d\\d)$/);\n\n  if (matches === null) {\n    throw new Error(\"Invalid test pattern '\".concat(pattern, \"'\").concat(context));\n  }\n\n  if (Number(matches[2]) < 1 || Number(matches[2]) > 12) {\n    throw new Error(\"Invalid month in ISO date '\".concat(pattern, \"'\").concat(context));\n  }\n\n  if (Number(matches[3]) < 1 || Number(matches[3]) > 31) {\n    throw new Error(\"Invalid day in ISO date '\".concat(pattern, \"'\").concat(context));\n  }\n}\n\nfunction buildBounds(patternFrom, patternTo, date) {\n  var YEAR = 0,\n      MONTH = 1,\n      DAY = 2;\n  var isoDate = date.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  var dateParts = isoDate.split('-');\n  var fromParts = patternFrom.split('-');\n  var toParts = patternTo.split('-');\n  var lowerParts = ['', '', ''];\n  var upperParts = ['', '', ''];\n  var monthRollover = fromParts[DAY] !== '??' && toParts[DAY] !== '??' && fromParts[DAY] > toParts[DAY];\n  var yearRollover = fromParts[MONTH] !== '??' && toParts[MONTH] !== '??' && (fromParts[MONTH] > toParts[MONTH] || fromParts[MONTH] === toParts[MONTH] && monthRollover);\n  var fromDate = new Date(date);\n  var toDate = new Date(date);\n\n  if (yearRollover) {\n    if (dateParts[MONTH] < fromParts[MONTH] || dateParts[MONTH] === fromParts[MONTH] && fromParts[DAY] !== '??' && dateParts[DAY] < fromParts[DAY]) {\n      fromDate.setFullYear(fromDate.getFullYear() - 1);\n    } else {\n      toDate.setFullYear(toDate.getFullYear() + 1);\n    }\n  } else if (monthRollover) {\n    if (dateParts[DAY] < fromParts[DAY]) {\n      fromDate.setMonth(fromDate.getMonth() - 1);\n    } else {\n      toDate.setMonth(toDate.getMonth() + 1);\n    }\n  }\n\n  var isoToDate = toDate.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  var toDatePars = isoToDate.split('-');\n  var isoFromDate = fromDate.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  var fromDatePars = isoFromDate.split('-');\n  lowerParts[DAY] = fromParts[DAY] === '??' ? fromDatePars[DAY] : fromParts[DAY];\n  lowerParts[MONTH] = fromParts[MONTH] === '??' ? fromDatePars[MONTH] : fromParts[MONTH];\n  lowerParts[YEAR] = fromParts[YEAR] === '????' ? fromDatePars[YEAR] : fromParts[YEAR];\n  upperParts[DAY] = toParts[DAY] === '??' ? toDatePars[DAY] : toParts[DAY];\n  upperParts[MONTH] = toParts[MONTH] === '??' ? toDatePars[MONTH] : toParts[MONTH];\n  upperParts[YEAR] = toParts[YEAR] === '????' ? toDatePars[YEAR] : toParts[YEAR];\n  return [lowerParts.join('-'), upperParts.join('-')];\n}\n\nfunction testDate(pattern) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  validateDatePattern(pattern);\n  var re = new RegExp(\"^\".concat(pattern, \"$\").replace(/\\?/g, '\\\\d'));\n  var isoDate = date.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  return isoDate.match(re) !== null;\n}\n\nfunction testDateRange(patternFrom, patternTo) {\n  var date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();\n  validateDatePattern(patternFrom, ' on left side of date range');\n  validateDatePattern(patternTo, ' on right side of date range');\n  var bounds = buildBounds(patternFrom, patternTo, date);\n  var isoDate = date.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  return isoDate >= bounds[0] && isoDate <= bounds[1];\n}\n\nfunction test(pattern) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var rangeParts = pattern.split('/');\n\n  if (rangeParts.length === 1) {\n    return testDate(pattern.trim(), date);\n  } else {\n    return testDateRange(rangeParts[0].trim(), rangeParts[1].trim(), date);\n  }\n}\n\nmodule.exports = {\n  test: test\n};\n\n},{}]},{},[1])(1)\n});\n"]}