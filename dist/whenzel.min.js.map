{"version":3,"sources":["whenzel.js"],"names":["f","exports","module","define","amd","window","global","self","this","Whenzel","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","WhenzelSymbols","validateDatePattern","pattern","context","arguments","undefined","matches","match","concat","Number","resolveExpression","expression","date","deltaSign","delta","substr","name","lookup","patternParts","split","shiftedDate","Date","setFullYear","setMonth","setDate","getDate","isoDateParts","toISOString","join","resolveSymbol","testDateRange","patternFrom","patternTo","bounds","dateParts","fromParts","toParts","lowerParts","upperParts","monthRollover","yearRollover","fromDate","toDate","getFullYear","getMonth","toDatePars","fromDatePars","buildBounds","isoDate","test","rangeParts","re","RegExp","replace","testDate","trim","./symbols","2","symbols","christmasEve","christmas","boxingDay","newYearsEve","newYear","halloween","allSaintsDay","aprilFools","earthDay","valentinesDay","stPatrick","laborDay","piDay","idm","value"],"mappings":"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","file":"whenzel.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Whenzel = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar WhenzelSymbols = require('./symbols');\n\nfunction validateDatePattern(pattern) {\n  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var matches = pattern.match(/^(\\?\\?\\?\\?|\\d\\d\\d\\d)-(\\?\\?|\\d\\d)-(\\?\\?|\\d\\d)$/);\n\n  if (matches === null) {\n    throw new Error(\"Invalid test pattern '\".concat(pattern, \"'\").concat(context));\n  }\n\n  if (Number(matches[2]) < 1 || Number(matches[2]) > 12) {\n    throw new Error(\"Invalid month in ISO date '\".concat(pattern, \"'\").concat(context));\n  }\n\n  if (Number(matches[3]) < 1 || Number(matches[3]) > 31) {\n    throw new Error(\"Invalid day in ISO date '\".concat(pattern, \"'\").concat(context));\n  }\n}\n\nfunction buildBounds(patternFrom, patternTo, date) {\n  var YEAR = 0,\n      MONTH = 1,\n      DAY = 2;\n  var isoDate = date.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  var dateParts = isoDate.split('-');\n  var fromParts = patternFrom.split('-');\n  var toParts = patternTo.split('-');\n  var lowerParts = ['', '', ''];\n  var upperParts = ['', '', ''];\n  var monthRollover = fromParts[DAY] !== '??' && toParts[DAY] !== '??' && fromParts[DAY] > toParts[DAY];\n  var yearRollover = fromParts[MONTH] !== '??' && toParts[MONTH] !== '??' && (fromParts[MONTH] > toParts[MONTH] || fromParts[MONTH] === toParts[MONTH] && monthRollover);\n  var fromDate = new Date(date);\n  var toDate = new Date(date);\n\n  if (yearRollover) {\n    if (dateParts[MONTH] < fromParts[MONTH] || dateParts[MONTH] === fromParts[MONTH] && fromParts[DAY] !== '??' && dateParts[DAY] < fromParts[DAY]) {\n      fromDate.setFullYear(fromDate.getFullYear() - 1);\n    } else {\n      toDate.setFullYear(toDate.getFullYear() + 1);\n    }\n  } else if (monthRollover) {\n    if (dateParts[DAY] < fromParts[DAY]) {\n      fromDate.setMonth(fromDate.getMonth() - 1);\n    } else {\n      toDate.setMonth(toDate.getMonth() + 1);\n    }\n  }\n\n  var isoToDate = toDate.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  var toDatePars = isoToDate.split('-');\n  var isoFromDate = fromDate.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  var fromDatePars = isoFromDate.split('-');\n  lowerParts[DAY] = fromParts[DAY] === '??' ? fromDatePars[DAY] : fromParts[DAY];\n  lowerParts[MONTH] = fromParts[MONTH] === '??' ? fromDatePars[MONTH] : fromParts[MONTH];\n  lowerParts[YEAR] = fromParts[YEAR] === '????' ? fromDatePars[YEAR] : fromParts[YEAR];\n  upperParts[DAY] = toParts[DAY] === '??' ? toDatePars[DAY] : toParts[DAY];\n  upperParts[MONTH] = toParts[MONTH] === '??' ? toDatePars[MONTH] : toParts[MONTH];\n  upperParts[YEAR] = toParts[YEAR] === '????' ? toDatePars[YEAR] : toParts[YEAR];\n  return [lowerParts.join('-'), upperParts.join('-')];\n}\n\nfunction resolveExpression(expression, date) {\n  if (expression.length < 2) {\n    return expression;\n  }\n\n  if (expression[0] === '@') {\n    var matches = expression.match(/^@([a-zA-Z0-9]+)\\s*([\\+\\-]\\s*\\d{1,3})?$/);\n\n    if (matches === null) {\n      throw new Error(\"Invalid expression: '\".concat(expression, \"'\"));\n    }\n\n    var deltaSign = 1;\n    var delta = 0;\n\n    if (matches[2] !== undefined) {\n      deltaSign = matches[2][0] === '-' ? -1 : 1;\n      delta = Number(matches[2].substr(1));\n    }\n\n    return resolveSymbol(matches[1], date, deltaSign * delta);\n  }\n\n  return expression;\n}\n\nfunction resolveSymbol(name, date, delta) {\n  var pattern = WhenzelSymbols.lookup(name, date);\n\n  if (delta !== 0) {\n    var patternParts = pattern.split('-');\n    var shiftedDate = new Date(date);\n\n    if (patternParts[0] !== '????') {\n      shiftedDate.setFullYear(Number(patternParts[0]));\n    }\n\n    if (patternParts[1] !== '??') {\n      shiftedDate.setMonth(Number(patternParts[1]) - 1);\n    }\n\n    if (patternParts[2] !== '??') {\n      shiftedDate.setDate(Number(patternParts[2]));\n    }\n\n    shiftedDate.setDate(shiftedDate.getDate() + delta);\n    var isoDate = shiftedDate.toISOString().substr(0, 'xxxx-xx-xx'.length);\n    var isoDateParts = isoDate.split('-');\n    return [patternParts[0] === '????' ? patternParts[0] : isoDateParts[0], isoDateParts[1] === '??' ? patternParts[1] : isoDateParts[1], isoDateParts[2] === '??' ? patternParts[2] : isoDateParts[2]].join('-');\n  }\n\n  return pattern;\n}\n\nfunction testDate(pattern) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  validateDatePattern(pattern);\n  var re = new RegExp(\"^\".concat(pattern, \"$\").replace(/\\?/g, '\\\\d'));\n  var isoDate = date.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  return isoDate.match(re) !== null;\n}\n\nfunction testDateRange(patternFrom, patternTo) {\n  var date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Date();\n  validateDatePattern(patternFrom, ' on left side of date range');\n  validateDatePattern(patternTo, ' on right side of date range');\n  var bounds = buildBounds(patternFrom, patternTo, date);\n  var isoDate = date.toISOString().substr(0, 'xxxx-xx-xx'.length);\n  return isoDate >= bounds[0] && isoDate <= bounds[1];\n}\n\nfunction test(pattern) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var rangeParts = pattern.split('/');\n\n  if (rangeParts.length === 1) {\n    return testDate(resolveExpression(pattern.trim(), date), date);\n  } else {\n    return testDateRange(resolveExpression(rangeParts[0].trim(), date), resolveExpression(rangeParts[1].trim(), date), date);\n  }\n}\n\nmodule.exports = {\n  test: test\n};\n\n},{\"./symbols\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nvar symbols = {\n  christmasEve: '????-12-24',\n  christmas: '????-12-25',\n  boxingDay: '????-12-26',\n  newYearsEve: '????-12-31',\n  newYear: '????-01-01',\n  halloween: '????-10-31',\n  allSaintsDay: '????-11-01',\n  aprilFools: '????-04-01',\n  earthDay: '????-04-22',\n  valentinesDay: '????-02-14',\n  stPatrick: '????-03-17',\n  laborDay: '????-05-01',\n  piDay: '????-03-14',\n  idm: '????-03-14'\n};\n\nfunction lookup(name, date) {\n  var value = symbols[name];\n\n  if (value === undefined) {\n    throw new Error(\"Unknown symbolic date '\".concat(name, \"'\"));\n  }\n\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (typeof value === 'function') {\n    return value(date);\n  }\n\n  throw new Error(\"Internal error. Symbol '\".concat(name, \"' has an invalid type.\"));\n}\n\nmodule.exports = {\n  lookup: lookup\n};\n\n},{}]},{},[1])(1)\n});\n"]}